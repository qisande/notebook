递归
排序
二分查找
搜索
哈希算法
贪心算法
分治算法
回溯算法
动态规划

```
static int maxValue(int[] values, int[] weights, int capacity) {
        if (values == null || values.length == 0) return 0;
        if (weights == null || weights.length == 0) return 0;
        if (values.length != weights.length || capacity <= 0) return 0;
        int[] dp = new int[capacity + 1];
        for (int i = 1; i <= values.length; i++) {
            for (int j = capacity; j >= 1; j--) {
                if (j < weights[i - 1]) {
                    dp[j] = dp[j];
                } else {
                    dp[j] = Math.max(
                            dp[j],
                            values[i - 1] + dp[j - weights[i - 1]]);
                }
            }
        }
        return dp[capacity];
    }
```



字符串匹配算法